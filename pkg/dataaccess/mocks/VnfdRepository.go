// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import models "github.com/vishwanathj/protovnfdparser/pkg/models"

// VnfdRepository is an autogenerated mock type for the VnfdRepository type
type VnfdRepository struct {
	mock.Mock
}

// FindVnfdByID provides a mock function with given fields: id
func (_m *VnfdRepository) FindVnfdByID(id string) (*models.Vnfd, error) {
	ret := _m.Called(id)

	var r0 *models.Vnfd
	if rf, ok := ret.Get(0).(func(string) *models.Vnfd); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Vnfd)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindVnfdByName provides a mock function with given fields: name
func (_m *VnfdRepository) FindVnfdByName(name string) (*models.Vnfd, error) {
	ret := _m.Called(name)

	var r0 *models.Vnfd
	if rf, ok := ret.Get(0).(func(string) *models.Vnfd); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Vnfd)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVnfds provides a mock function with given fields: start, limit, sort
func (_m *VnfdRepository) GetVnfds(start string, limit int, sort string) ([]models.Vnfd, int, error) {
	ret := _m.Called(start, limit, sort)

	var r0 []models.Vnfd
	if rf, ok := ret.Get(0).(func(string, int, string) []models.Vnfd); ok {
		r0 = rf(start, limit, sort)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Vnfd)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(string, int, string) int); ok {
		r1 = rf(start, limit, sort)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, int, string) error); ok {
		r2 = rf(start, limit, sort)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// InsertVnfd provides a mock function with given fields: vnfd
func (_m *VnfdRepository) InsertVnfd(vnfd *models.Vnfd) error {
	ret := _m.Called(vnfd)

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.Vnfd) error); ok {
		r0 = rf(vnfd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
